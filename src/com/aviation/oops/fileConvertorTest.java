package com.aviation.oops;

import com.itextpdf.text.DocumentException;
import org.apache.log4j.Logger;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;

import static org.junit.jupiter.api.Assertions.*;
/*
*The class fileConvertorTest contains the test cases for the convertors class.
 */
class fileConvertorTest {
    convertors files;

    @BeforeEach
    void setup(){
        files = new convertors();
    }

    private static final Logger logger = Logger.getLogger(fileConvertorTest.class);

    /*
     *The Test Method csvtopdfexists checks either the file is generated by the csvtopdf method from the convertors class.
     */

    @Test
    void PdfFileExists() {
        try {
            files.csvtopdf("/Users/azuga/Desktop/result.csv", "/Users/azuga/Desktop/converted_PDF_File.pdf");
            logger.info("The csvtopdf method is called from convertors class.");

            File Pdffile = new File("/Users/azuga/Desktop/converted_PDF_File.pdf");
            assertTrue(Pdffile.exists());

            Assertions.assertTrue(Pdffile.getAbsolutePath().endsWith(
                    "converted_PDF_File.pdf"));
            logger.info("The pdf file generated from the  internal source exist.");
        }
        catch( IOException e ) {
            logger.error("IOException", e);
        } catch (DocumentException e) {
            logger.error("DocumentException", e);
        }

    }

    /*
     *The Test Method csvtopdf compares the pdf files from internal(Aviation API url) and external source.
     */

    @Test
    void csvtopdfConversion() {
        try {
            files.csvtopdf("/Users/azuga/Desktop/result.csv", "/Users/azuga/Desktop/converted_PDF_File.pdf");
            logger.info("The csvtopdf method is called from convertors class.");


            byte[] file1Bytes = Files.readAllBytes(Paths.get("/Users/azuga/Desktop/converted_PDF_File.pdf"));
            byte[] file2Bytes = Files.readAllBytes(Paths.get("/Users/azuga/Desktop/Truebox/converted_PDF_File1.pdf"));
            String ActualOutput = new String(file1Bytes, StandardCharsets.UTF_8);
            String ExpectedOutput = new String(file2Bytes, StandardCharsets.UTF_8);

            Assertions.assertEquals( ActualOutput, ExpectedOutput);
            logger.info("The comparisons of pdf files from internal and external source was successful.");

        }
        catch( IOException e ) {
            logger.error("IOException", e);
        }
        catch (DocumentException e) {
            logger.error("DocumentException", e);
        }
    }

    /*
     *The Test Method NoPdfFile is Executed for FileNotFoundException.
     * The following method check whether the file is present.
     */

    @Test
    void NoPdfFile(){
        Assertions.assertThrows(FileNotFoundException.class,
                () -> files.csvtopdf("/Users/azuga/Desktop/result.csv", "/Users/azuga/Desktop/converted_PDF_File.pdf"));

        logger.error("FileNotFoundException");
    }

    /*
     *The Test Method NoPdfDocument is Executed for DocumentException.
     */

    @Test
    void NoPdfDocument(){
        Assertions.assertThrows(DocumentException.class,
                () -> files.csvtopdf("/Users/azuga/Desktop/result.csv", "/Users/azuga/Desktop/converted_PDF_File.pdf"));

        logger.error("DocumentException");
    }

    /*
     *The Test Method csvtohtmlexists checks either the file is generated by the csvtohtml method from the convertors class.
     */

    @Test
    void HtmlFileExists(){
        files.csvtohtml("/Users/azuga/Desktop/result.csv", "/Users/azuga/Desktop/converted.html");
        logger.info("The csvtohtml method is called from convertors class.");

        File HTMLfile = new File("/Users/azuga/Desktop/converted.html");
        assertTrue( HTMLfile.exists() );

        assertTrue( HTMLfile.getAbsolutePath().endsWith(
                "converted.html" ));
        logger.info("The html file generated from the  internal source exist.");

    }

    /*
     *The Test Method csvtohtml compares the html files from internal(Aviation API url) and external source.
     */

    @Test
    void csvtohtmlConversion(){

        try {
            files.csvtohtml("/Users/azuga/Desktop/result.csv", "/Users/azuga/Desktop/converted.html");
            logger.info("The csvtohtml method is called from convertors class.");

            byte[] file1Bytes = Files.readAllBytes(Paths.get("/Users/azuga/Desktop/converted.html"));
            byte[] file2Bytes = Files.readAllBytes(Paths.get("/Users/azuga/Desktop/Truebox/converted1.html"));
            String ActualOutput = new String(file1Bytes, StandardCharsets.UTF_8);
            String ExpectedOutput = new String(file2Bytes, StandardCharsets.UTF_8);

            assertEquals( ActualOutput, ExpectedOutput);
            logger.info("The comparisons of html files from internal and external source was successful.");

        }
        catch( IOException e ) {
            logger.error("IOException", e);
        }

    }

    /*
     *The Test Method NohtmlFile is Executed for FileNotFoundException .
     */

    @Test
    void NohtmlFile(){
        Assertions.assertThrows(FileNotFoundException.class,
                () -> files.csvtohtml("/Users/azuga/Desktop/result.csv", "/Users/azuga/Desktop/converted.html"));

        logger.error("FileNotFoundException");

    }

    /*
     *The Test Method csvtoExcelexists checks either the file is generated by the csvtoExcel method from the convertors class.
     */

    @Test
    void ExcelFileExists(){
        files.csvtoExcel("/Users/azuga/Desktop/result.csv", "/Users/azuga/Desktop/result1.xlsx");
        logger.info("The csvtoExcel method is called from convertors class.");

        File Excelfile = new File("/Users/azuga/Desktop/result1.xlsx");
        assertTrue( Excelfile.exists() );

        assertTrue( Excelfile.getAbsolutePath().endsWith(
                "result1.xlsx" ));
        logger.info("The Excel file generated from the  internal source exist.");

    }

    /*
     *The Test Method csvtoExcel compares the Excel files from internal(Aviation API url) and external source.
     */

    @Test
    void csvtoExcelConversion() {

        try {
            files.csvtoExcel("/Users/azuga/Desktop/result.csv", "/Users/azuga/Desktop/result1.xlsx");
            logger.info("The csvtoExcel method is called from convertors class.");

            byte[] file1Bytes = Files.readAllBytes(Paths.get("/Users/azuga/Desktop/result1.xlsx"));
            byte[] file2Bytes = Files.readAllBytes(Paths.get("/Users/azuga/Desktop/Truebox/result2.xlsx"));
            String ActualOutput = new String(file1Bytes, StandardCharsets.UTF_8);
            String ExpectedOutput = new String(file2Bytes, StandardCharsets.UTF_8);

            Assertions.assertEquals( ActualOutput, ExpectedOutput);
            logger.info("The comparisons of Excel files from internal and external source was successful.");

        }
        catch( IOException e ) {
            logger.error("IOException", e);
        }

    }

    /*
     *The Test Method NoExcelFile is Executed for FileNotFoundException .
     */

    @Test
    void NoExcelFile(){
        Assertions.assertThrows(FileNotFoundException.class,
                () -> files.csvtoExcel("/Users/azuga/Desktop/result.csv", "/Users/azuga/Desktop/result1.xlsx"));
        logger.error("FileNotFoundException");

    }

}